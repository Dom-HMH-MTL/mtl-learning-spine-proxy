{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "dist/client/app/components/spine-node.js",
      "properties": [
        {
          "name": "renderComplete",
          "type": "?",
          "description": "Returns a promise which resolves after the element next renders.\nThe promise resolves to `true` if the element rendered and `false` if the\nelement did not render.\nThis is useful when users (e.g. tests) need to react to the rendered state\nof the element after a change is made.\nThis can also be useful in event handlers if it is desireable to wait\nto send an event until after rendering. If possible implement the\n`_didRender` method to directly respond to rendering within the\nrendering lifecycle.\n     ",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "item",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 9,
              "column": 12
            },
            "end": {
              "line": 9,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "mode",
          "type": "Mode | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 12
            },
            "end": {
              "line": 10,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Mode"
            }
          }
        },
        {
          "name": "position",
          "type": "Mode | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 11,
              "column": 12
            },
            "end": {
              "line": 11,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Mode"
            }
          }
        },
        {
          "name": "setSize",
          "type": "Mode | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 12
            },
            "end": {
              "line": 12,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Mode"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Override which sets up element rendering by calling* `_createRoot`\nand `_firstRendered`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_firstRendered",
          "description": "Called after the element DOM is rendered for the first time.\nImplement to perform tasks after first rendering like capturing a\nreference to a static node which must be directly manipulated.\nThis should not be commonly needed. For tasks which should be performed\nbefore first render, use the element constructor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 24
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_createRoot",
          "description": "Implement to customize where the element's template is rendered by\nreturning an element into which to render. By default this creates\na shadowRoot for the element. To render into the element's childNodes,\nreturn `this`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | DocumentFragment)",
            "desc": "Returns a node into which to render."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Override which returns the value of `_shouldRender` which users\nshould implement to control rendering. If this method returns false,\n_propertiesChanged will not be called and no rendering will occur even\nif property values change or `requestRender` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldRender",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props"
            }
          ]
        },
        {
          "name": "_propertiesChanged",
          "description": "Override which performs element rendering by calling\n`_render`, `_applyRender`, and finally `_didRender`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 133,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "description": "Current element properties"
            },
            {
              "name": "changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_flushProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "tslint:disable-next-line no-any",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 158,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_render",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  item,\n  mode,\n  position,\n  setSize\n}"
            }
          ]
        },
        {
          "name": "_applyRender",
          "description": "Renders the given lit-html template `result` into the given `node`.\nImplement to customize the way rendering is applied. This is should not\ntypically be needed and is provided for advanced use cases.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "description": "{TemplateResult} `lit-html` template result to render"
            },
            {
              "name": "node",
              "description": "{Element|DocumentFragment} node into which to render"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_didRender",
          "description": "Called after element DOM has been rendered. Implement to\ndirectly control rendered DOM. Typically this is not needed as `lit-html`\ncan be used in the `_render` method to set properties, attributes, and\nevent listeners. However, it is sometimes useful for calling methods on\nrendered elements, like calling `focus()` on an element to focus it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 53
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "requestRender",
          "description": "Call to request the element to asynchronously re-render regardless\nof whether or not any property changes are pending.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 53
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_invalidateProperties",
          "description": "Override which provides tracking of invalidated state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "collapseNode",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "expandChild",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 6,
          "column": 7
        },
        "end": {
          "line": 65,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "SpineNode",
      "attributes": [
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 9,
              "column": 12
            },
            "end": {
              "line": 9,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "mode",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 12
            },
            "end": {
              "line": 10,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Mode | null | undefined"
        },
        {
          "name": "position",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 11,
              "column": 12
            },
            "end": {
              "line": 11,
              "column": 26
            }
          },
          "metadata": {},
          "type": "Mode | null | undefined"
        },
        {
          "name": "set-size",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 12
            },
            "end": {
              "line": 12,
              "column": 25
            }
          },
          "metadata": {},
          "type": "Mode | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "spine-node"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/app/components/spine-skill.js",
      "properties": [
        {
          "name": "renderComplete",
          "type": "?",
          "description": "Returns a promise which resolves after the element next renders.\nThe promise resolves to `true` if the element rendered and `false` if the\nelement did not render.\nThis is useful when users (e.g. tests) need to react to the rendered state\nof the element after a change is made.\nThis can also be useful in event handlers if it is desireable to wait\nto send an event until after rendering. If possible implement the\n`_didRender` method to directly respond to rendering within the\nrendering lifecycle.\n     ",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 12
            },
            "end": {
              "line": 12,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "indeterminate",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 12
            },
            "end": {
              "line": 13,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "item",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 12
            },
            "end": {
              "line": 14,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selected",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 12
            },
            "end": {
              "line": 15,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Override which sets up element rendering by calling* `_createRoot`\nand `_firstRendered`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_firstRendered",
          "description": "Called after the element DOM is rendered for the first time.\nImplement to perform tasks after first rendering like capturing a\nreference to a static node which must be directly manipulated.\nThis should not be commonly needed. For tasks which should be performed\nbefore first render, use the element constructor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 24
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_createRoot",
          "description": "Implement to customize where the element's template is rendered by\nreturning an element into which to render. By default this creates\na shadowRoot for the element. To render into the element's childNodes,\nreturn `this`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | DocumentFragment)",
            "desc": "Returns a node into which to render."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Override which returns the value of `_shouldRender` which users\nshould implement to control rendering. If this method returns false,\n_propertiesChanged will not be called and no rendering will occur even\nif property values change or `requestRender` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldRender",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  item\n}"
            }
          ]
        },
        {
          "name": "_propertiesChanged",
          "description": "Override which performs element rendering by calling\n`_render`, `_applyRender`, and finally `_didRender`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 133,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "description": "Current element properties"
            },
            {
              "name": "changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_flushProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "tslint:disable-next-line no-any",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 158,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_render",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  disabled,\n  indeterminate,\n  item,\n  selected\n}"
            }
          ]
        },
        {
          "name": "_applyRender",
          "description": "Renders the given lit-html template `result` into the given `node`.\nImplement to customize the way rendering is applied. This is should not\ntypically be needed and is provided for advanced use cases.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "description": "{TemplateResult} `lit-html` template result to render"
            },
            {
              "name": "node",
              "description": "{Element|DocumentFragment} node into which to render"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_didRender",
          "description": "Called after element DOM has been rendered. Implement to\ndirectly control rendered DOM. Typically this is not needed as `lit-html`\ncan be used in the `_render` method to set properties, attributes, and\nevent listeners. However, it is sometimes useful for calling methods on\nrendered elements, like calling `focus()` on an element to focus it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 53
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "requestRender",
          "description": "Call to request the element to asynchronously re-render regardless\nof whether or not any property changes are pending.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 53
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_invalidateProperties",
          "description": "Override which provides tracking of invalidated state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "onSelect",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1,
          "column": 7
        },
        "end": {
          "line": 66,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "Skill",
      "attributes": [
        {
          "name": "disabled",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 12
            },
            "end": {
              "line": 12,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "indeterminate",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 12
            },
            "end": {
              "line": 13,
              "column": 34
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 12
            },
            "end": {
              "line": 14,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 12
            },
            "end": {
              "line": 15,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "spine-skill"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/app/components/learning-spine-browser.js",
      "properties": [
        {
          "name": "renderComplete",
          "type": "?",
          "description": "Returns a promise which resolves after the element next renders.\nThe promise resolves to `true` if the element rendered and `false` if the\nelement did not render.\nThis is useful when users (e.g. tests) need to react to the rendered state\nof the element after a change is made.\nThis can also be useful in event handlers if it is desireable to wait\nto send an event until after rendering. If possible implement the\n`_didRender` method to directly respond to rendering within the\nrendering lifecycle.\n     ",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "breadcrumbs",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 12
            },
            "end": {
              "line": 51,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "preSelectedSkillIds",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 12
            },
            "end": {
              "line": 52,
              "column": 39
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "spineTreeId",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 12
            },
            "end": {
              "line": 53,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Override which sets up element rendering by calling* `_createRoot`\nand `_firstRendered`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_firstRendered",
          "description": "Called after the element DOM is rendered for the first time.\nImplement to perform tasks after first rendering like capturing a\nreference to a static node which must be directly manipulated.\nThis should not be commonly needed. For tasks which should be performed\nbefore first render, use the element constructor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 24
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_createRoot",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Override which returns the value of `_shouldRender` which users\nshould implement to control rendering. If this method returns false,\n_propertiesChanged will not be called and no rendering will occur even\nif property values change or `requestRender` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldRender",
          "description": "Implement to control if rendering should occur when property values\nchange or `requestRender` is called. By default, this method always\nreturns true, but this can be customized as an optimization to avoid\nrendering work when changes occur which should not be rendered.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Default implementation always returns true."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_propertiesChanged",
          "description": "Override which performs element rendering by calling\n`_render`, `_applyRender`, and finally `_didRender`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 133,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "description": "Current element properties"
            },
            {
              "name": "changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_flushProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "tslint:disable-next-line no-any",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 158,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            },
            {
              "name": "old"
            }
          ],
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_render",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  spineTreeId\n}"
            }
          ]
        },
        {
          "name": "_applyRender",
          "description": "Renders the given lit-html template `result` into the given `node`.\nImplement to customize the way rendering is applied. This is should not\ntypically be needed and is provided for advanced use cases.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "description": "{TemplateResult} `lit-html` template result to render"
            },
            {
              "name": "node",
              "description": "{Element|DocumentFragment} node into which to render"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_didRender",
          "description": "Called after element DOM has been rendered. Implement to\ndirectly control rendered DOM. Typically this is not needed as `lit-html`\ncan be used in the `_render` method to set properties, attributes, and\nevent listeners. However, it is sometimes useful for calling methods on\nrendered elements, like calling `focus()` on an element to focus it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 53
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_props",
              "description": "Current element properties"
            },
            {
              "name": "_changedProps",
              "description": "Changing element properties"
            },
            {
              "name": "_prevProps",
              "description": "Previous element properties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "requestRender",
          "description": "Call to request the element to asynchronously re-render regardless\nof whether or not any property changes are pending.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 53
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_invalidateProperties",
          "description": "Override which provides tracking of invalidated state.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../../node_modules/%40polymer/lit-element/lit-element.js",
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "getSelectedSkills",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "onSelected",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 21,
          "column": 7
        },
        "end": {
          "line": 119,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "LearningSpineBrowser",
      "attributes": [
        {
          "name": "breadcrumbs",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 12
            },
            "end": {
              "line": 51,
              "column": 30
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "pre-selected-skill-ids",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 12
            },
            "end": {
              "line": 52,
              "column": 39
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "spine-tree-id",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 12
            },
            "end": {
              "line": 53,
              "column": 31
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "learning-spine-browser"
    }
  ],
  "functions": [
    {
      "name": "loadSpineTrees",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "dist/client/app/index.js",
        "start": {
          "line": 3,
          "column": 7
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    },
    {
      "name": "loadSpineNode",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "dist/client/app/index.js",
        "start": {
          "line": 14,
          "column": 7
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    },
    {
      "name": "loadSkill",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "dist/client/app/index.js",
        "start": {
          "line": 21,
          "column": 7
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    },
    {
      "name": "displaySpineTrees",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "dist/client/app/index.js",
        "start": {
          "line": 28,
          "column": 7
        },
        "end": {
          "line": 37,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    },
    {
      "name": "displaySpineTreeElements",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "dist/client/app/index.js",
        "start": {
          "line": 38,
          "column": 7
        },
        "end": {
          "line": 62,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    },
    {
      "name": "loadSpineNode",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "dist/client/app/components/learning-spine-browser.js",
        "start": {
          "line": 7,
          "column": 7
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    },
    {
      "name": "loadSkill",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "dist/client/app/components/learning-spine-browser.js",
        "start": {
          "line": 14,
          "column": 7
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    }
  ],
  "classes": [
    {
      "description": "List of all concrete BaseResource classes implementions",
      "summary": "",
      "path": "dist/server/server.js",
      "properties": [],
      "methods": [
        {
          "name": "start",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getTypedResourceDefinition",
          "description": "Simple getter to type the imported object and to allow injection at testing time",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "definitions",
              "defaultValue": "appResources"
            }
          ]
        },
        {
          "name": "getServerDirectory",
          "description": "Simple getter to allow injection at testing time",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getTypedConfig",
          "description": "Simple getter to type the imported object and to allow injection at testing time",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config",
              "defaultValue": "appConfig"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseServer",
      "name": "Server"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc-proxy/Skill.js",
      "properties": [],
      "methods": [
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 7
        },
        "end": {
          "line": 35,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Parent",
      "name": "Skill"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc-proxy/SpineNode.js",
      "properties": [],
      "methods": [
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 7
        },
        "end": {
          "line": 29,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Parent",
      "name": "SpineNode"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc-proxy/SpineTree.js",
      "properties": [],
      "methods": [
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 7
        },
        "end": {
          "line": 21,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Parent",
      "name": "SpineTree"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc/TaxonomyPathElement.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 7
        },
        "end": {
          "line": 11,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "TaxonomyPathElement"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc/ContainingGroup.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 7
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ContainingGroup"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc/Skill.js",
      "properties": [],
      "methods": [
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 7
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Parent",
      "name": "Skill"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc/SkillReference.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 7
        },
        "end": {
          "line": 11,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "SkillReference"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc/SkillGroup.js",
      "properties": [],
      "methods": [
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 7
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Parent",
      "name": "SkillGroup"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc/SkillRootGroup.js",
      "properties": [],
      "methods": [
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 7
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Parent",
      "name": "SkillRootGroup"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/client/model/cc/Spine.js",
      "properties": [],
      "methods": [
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "merge",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../../node_modules/%40hmh/nodejs-base-server/dist/client/model/BaseModel.js",
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "update"
            }
          ],
          "inheritedFrom": "BaseModel"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 7
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Parent",
      "name": "Spine"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc/BaseDao.js",
      "properties": [],
      "methods": [
        {
          "name": "getServiceUrl",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "snapshotId"
            }
          ]
        },
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "parameters"
            }
          ]
        },
        {
          "name": "query",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filters"
            }
          ]
        },
        {
          "name": "create",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "update",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "delete",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseHttpDao",
      "name": "BaseDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc/SkillDao.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "BaseDao_1.BaseDao",
      "name": "SkillDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc/SkillGroupDao.js",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "parameters"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "BaseDao_1.BaseDao",
      "name": "SkillGroupDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc/SkillRootGroupDao.js",
      "properties": [
        {
          "name": "modelName",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "parameters"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "BaseDao_1.BaseDao",
      "name": "SkillRootGroupDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc/SpineDao.js",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "parameters"
            }
          ]
        },
        {
          "name": "query",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "BaseDao_1.BaseDao",
      "name": "SpineDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc/SpineServiceApiInfo.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "SpineServiceApiInfo"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc-proxy/SkillDao.js",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "parameters"
            }
          ]
        },
        {
          "name": "query",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filters"
            }
          ]
        },
        {
          "name": "create",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "update",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "delete",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "registerSkill",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "snapshotId"
            },
            {
              "name": "skill"
            },
            {
              "name": "parentId"
            }
          ]
        },
        {
          "name": "getSkill",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "spineTreeId"
            },
            {
              "name": "id"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 59,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseDao",
      "name": "SkillDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc-proxy/SpineNodeDao.js",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "parameters"
            }
          ]
        },
        {
          "name": "query",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filters"
            }
          ]
        },
        {
          "name": "create",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "update",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "delete",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "spreadGroups",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "snapshotId"
            },
            {
              "name": "parentNodeId"
            },
            {
              "name": "groups"
            },
            {
              "name": "depth"
            }
          ]
        },
        {
          "name": "spreadRoot",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "snapshotId"
            },
            {
              "name": "root"
            }
          ]
        },
        {
          "name": "dispatchSkills",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "snapshotId"
            },
            {
              "name": "node"
            },
            {
              "name": "depth",
              "defaultValue": "0"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getNodes",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "spineTreeId"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseDao",
      "name": "SpineNodeDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/dao/cc-proxy/SpineTreeDao.js",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 24,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "query",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "create",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 30,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "update",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "candidate"
            }
          ]
        },
        {
          "name": "delete",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "getSpines",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseDao",
      "name": "SpineTreeDao"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc-proxy/Skill.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "Skill"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc-proxy/SpineNode.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "SpineNode"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc-proxy/SpineTree.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "SpineTree"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc/ContainingGroup.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ContainingGroup"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc/Skill.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "Skill"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc/SkillGroup.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "SkillGroup"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc/SkillRootGroup.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "SkillRootGroup"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc/SkillReference.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "SkillReference"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc/Spine.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "Spine"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/model/cc/TaxonomyPathElement.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "TaxonomyPathElement"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/resource/cc/SkillGroupResource.js",
      "properties": [],
      "methods": [
        {
          "name": "getServiceType",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseResource",
      "name": "SkillGroupResource"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/resource/cc-proxy/SkillResource.js",
      "properties": [],
      "methods": [
        {
          "name": "getServiceType",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseResource",
      "name": "SkillResource"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/resource/cc-proxy/SpineNodeResource.js",
      "properties": [],
      "methods": [
        {
          "name": "getServiceType",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseResource",
      "name": "SpineNodeResource"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/resource/cc-proxy/SpineTreeResource.js",
      "properties": [],
      "methods": [
        {
          "name": "getServiceType",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "Factory method",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseResource",
      "name": "SpineTreeResource"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/service/cc/SkillGroupService.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseService",
      "name": "SkillGroupService"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/service/cc-proxy/SkillService.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseService",
      "name": "SkillService"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/service/cc-proxy/SpineNodeService.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseService",
      "name": "SpineNodeService"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server/service/cc-proxy/SpineTreeService.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseService",
      "name": "SpineTreeService"
    },
    {
      "description": "tslint:disable: max-classes-per-file",
      "summary": "",
      "path": "dist/server-unit/dao/cc/BaseDao.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "nodejs_base_server_1.BaseModel",
      "name": "TestModel"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/server-unit/dao/cc/BaseDao.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "BaseDao_1.BaseDao",
      "name": "TestDao"
    }
  ]
}
